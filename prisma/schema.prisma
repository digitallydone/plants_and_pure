// Path: prisma/schema.prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           String    @default("user")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts       Account[]
  sessions       Session[]
  orders         Order[]
  wishlist       Wishlist?
  addresses      Address[]
  notes          OrderNote[]
  blogPosts      BlogPost[]
  // reviews        Review[]
  paymentMethods PaymentMethod[]
  cart           Cart[]
}

// models/cart.js or prisma/schema.prisma

model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  price        Float
  comparePrice Float?
  images       String[]
  category     String
  brand        String?
  sku          String   @unique
  barcode      String?
  weight       Float?
  quantity     Int      @default(0)
  lowStock     Int      @default(5)
  status       String   @default("active")
  bestSeller   Boolean  @default(true)
  newArrival   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  orderItems    OrderItem[]
  wishlistItems WishlistItem[]
  cartItems     Cart[]
}

model Order {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  userId          String      @db.ObjectId
  orderNumber     String      @unique
  status          String      @default("pending")
  paymentStatus   String      @default("pending")
  paymentMethod   String?
  paymentId       String?
  subtotal        Float
  shipping        Float
  tax             Float
  total           Float
  shippingAddress Json
  billingAddress  Json
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  items           OrderItem[]
  notes           OrderNote[]
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  productId String  @db.ObjectId
  quantity  Int
  price     Float
  name      String
  image     String?

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Wishlist {
  id     String         @id @default(auto()) @map("_id") @db.ObjectId
  userId String         @unique @db.ObjectId
  items  WishlistItem[]
  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WishlistItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  wishlistId String   @db.ObjectId
  productId  String   @db.ObjectId
  addedAt    DateTime @default(now())

  wishlist Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Address {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  firstName String
  lastName  String
  address   String
  city      String
  state     String
  zip       String
  country   String
  phone     String
  isDefault Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PaymentMethod {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  userId     String  @db.ObjectId
  type       String // card, paystack, mobile_money
  provider   String? // visa, mastercard, mtn, etc.
  lastFour   String? // last four digits for cards
  expiryDate String? // MM/YY format for cards
  isDefault  Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrderNote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  content   String
  type      String   @default("manual") // manual, system, status_change, payment_update
  createdAt DateTime @default(now())
  userId    String?  @db.ObjectId

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user  User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model BlogPost {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  slug          String   @unique
  excerpt       String?
  content       String
  status        String   @default("draft") // draft, published, archived
  featuredImage String?
  authorId      String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}
